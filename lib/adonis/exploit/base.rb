#encoding: utf-8

require 'thread'

module ADONIS
module EXPLOIT

class Base

    attr_accessor :id, :name, :service, :desc, :port_str, :need_check, :log_msg

    # id, 种类，名称，服务，描述，端口，是否需要检测端口
    def update_info(id, name, service, desc, port_str, need_check = true)
        @id = id
        @name = name
        @service = service
        @desc = desc
        @port_str = port_str
        @need_check = need_check
        return self
    end

    def check host
        return true
    end

    def default_check host
        port = port_str.split("_")
        if port.size != 2
            return false
        end

        check_by_port host.ip, port[1], port[0]
    end

    def check_by_port ip, port, type = "tcp"
        return true if type == "udp"
        
        if type == "tcp"
            return true
        end

        return false
    end

    def exploit host
        ip = host.ip
        if need_check && (not default_check(host))
            exploit_logger.error("ADONIS::EXPLOIT::Base.exploit, #{id}: default_check error #{id}:#{ip}:#{port_str}")
            return false
        end

        if not check(host)
            exploit_logger.error("ADONIS::EXPLOIT::Base.exploit, #{id}: check error #{id}:#{ip}:#{port_str}")
            return false
        end

        if host.is_tested_by_exploit(id)
            exploit_logger.error("ADONIS::EXPLOIT::Base.exploit, #{id}: already tested #{id}:#{ip}:#{port_str}")
            return false
        end

        msg = "----#{id}: start explioit #{Time.now}--"

        if exploit_fuc(host)
            msg += log_msg
            exploit_logger.info("ADONIS::EXPLOIT::Base.exploit, #{id}: exploit success #{id}:#{ip}:#{port_str} #{log_msg}")
            host.is_vuln = true
            host.add_exploit_module id

            #创建Exm
            if ::ADONIS::MODEL::Exm.where(:module_id => id.to_i, :host_id => host_id, :pa => log_msg).size == 0  
                exm = ::ADONIS::MODEL::Exm.new
                exm.module_id = id.to_i
                exm.host_id = host.id
                exm.pa = log_msg
                exm.save
            else
                exploit_logger.error("#{self.class} exploit, #{id}: create cxms #{id}:#{ip}:#{port_str} #{log_msg}")
            end

            if control_fuc host
                msg += "--control: #{log_msg}"
                exploit_logger.info("ADONIS::EXPLOIT::Base.exploit, #{id}: control success #{id}:#{ip}:#{port_str} #{log_msg}")
                host.is_control = true
            end
        else
            msg += "false: #{log_msg}"
            exploit_logger.info("ADONIS::EXPLOIT::Base.exploit, #{id}: exploit notsucc #{id}:#{ip}:#{port_str} #{log_msg}")
        end
        msg += "--#{id} exploit end #{Time.now}----"

        host.add_tested_exploit_module(id)

        if host.history.nil?
            host.history = msg
        else
            host.history = host.history + msg
        end

        host.save
    end

    def exploit_fuc host
        return false
    end

    def control_fuc host
        return false
    end

end

end
end

