#encoding: utf-8

require 'thread'

module ADONIS
module EXPLOIT

class Base

    # id, 种类，名称，描述，端口，是否需要检测端口
    def update_info(id, name, desc, port_str, need_check = true)
        @info = {:id => id, :name => name, :desc => desc, :port_str => port_str, :need_check => need_check}
        return self
    end

    def id
        @info[:id]
    end

    def name
        @info[:name]
    end

    def desc
        @info[:desc]
    end

    def port
        @info[:port_str]
    end

    def check host
        return true
    end

    def default_check host
        port = @info[:port_str].split("_")
        if port.size != 2
            return false
        end

        check_by_port host.ip, port[1], port[0]
    end

    def check_by_port ip, port, type = "tcp"
        return true if type == "udp"
        
        if type == "tcp"
            return true
        end

        return false
    end

    def exploit host
        ip = host.ip
        if @info[:need_check] && (not default_check(host))
            exploit_logger.error("ADONIS::EXPLOIT::Base.exploit, #{id}: default_check error #{@info[:id]}:#{ip}:#{@info[:port_str]}")
            return false
        end

        if not check(host)
            exploit_logger.error("ADONIS::EXPLOIT::Base.exploit, #{id}: check error #{@info[:id]}:#{ip}:#{@info[:port_str]}")
            return false
        end

        if host.is_tested_by_exploit(@info[:id])
            exploit_logger.error("ADONIS::EXPLOIT::Base.exploit, #{id}: already tested #{@info[:id]}:#{ip}:#{@info[:port_str]}")
            return false
        end

        msg = "----#{@info[:id]}: start explioit #{Time.now}--"

        r = exploit_fuc(host)
        if r
            msg += r
            exploit_logger.info("ADONIS::EXPLOIT::Base.exploit, #{id}: exploit success #{@info[:id]}:#{ip}:#{@info[:port_str]} #{r}")
            host.is_vuln = true
            host.add_exploit_module @info[:id]

            #创建Exm
            exm = ::ADONIS::MODEL::Exm.new
            exm.module_id = @info[:id].to_i
            exm.host_id = host.id
            exm.pa = r
            exm.save

            s = control_fuc host
            if s
                msg += "--control: #{s}"
                exploit_logger.info("ADONIS::EXPLOIT::Base.exploit, #{id}: control success #{@info[:id]}:#{ip}:#{@info[:port_str]} #{s}")
                host.is_control = true
            end
        else
            msg += "exploit return: false"
            exploit_logger.info("ADONIS::EXPLOIT::Base.exploit, #{id}: exploit notsucc #{@info[:id]}:#{ip}:#{@info[:port_str]}")
        end
        msg += "--#{@info[:id]} exploit end #{Time.now}----"

        host.add_tested_exploit_module(@info[:id])

        if host.history.nil?
            host.history = msg
        else
            host.history = host.history + msg
        end

        host.save
    end

    def exploit_fuc host
        return nil
    end

    def control_fuc host
        return nil
    end

end

end
end

