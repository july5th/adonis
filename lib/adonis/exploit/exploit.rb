#encoding: utf-8

require 'thread'

module ADONIS
module EXPLOIT

class Exploit

    def self.add_exploit_targets hosts
        hosts.each do |target|
            add_target target
        end
        return hosts.size
    end

    def self.add_target host
        ::ADONIS::COMMON::Queue.lpush "exploit_queue", host.id
    end

    def self.get_target
        host_id = ::ADONIS::COMMON::Queue.lpop "exploit_queue"
        if host_id.nil?
            return nil
        else
            return ::ADONIS::MODEL::Host.find(host_id)
        end
    end

    def self.run
        while true
            #begin
                target = get_target
                if target.nil? 
                    sleep 2
                else
                    exploit target
                end
            #rescue => e
                #exploit_logger.error("ADONIS::EXPLOIT::Exploit.run, #{e}")
            #end
        end
    end

    def self.exploit host
	_exploit host, ::ADONIS::EXPLOIT::ModuleRoot
    end

    def self._exploit host, node
	p "start check #{node.base.name}"
	# 检测节点状态
	return false if node.active == false 

	check_children = false

	case node.base.type
	when 'check'
		check_children = node.base.check host
	when 'exploit'
		check_children = node.base.exploit host
	when 'info'
		node.base.info host
                check_children = true
	when 'route'
		route = route_func host
		_exploit(host, route) unless route.blank?
	end

	if check_children
		node.children_node_list.each do |n|
			_exploit host, n
		end
		 
	end

	return false
    end

end
end
end
