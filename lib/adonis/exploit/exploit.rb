#encoding: utf-8

require 'thread'

module ADONIS
module EXPLOIT

class Exploit

    def self.load_modules
        @exploit_module_hash_by_spec = {}
        @exploit_module_hash = {}

        tmp_list = []

        #加载exploit模块
        exploit_module_file_path = File.join(::ADONIS::BaseDir, "modules/exploit/*.rb")
        Dir.foreach(File.join(::ADONIS::BaseDir, "modules")) do |entry|
            next if entry == "." or entry == ".."
            @exploit_module_hash_by_spec.update({entry.to_sym => {}})

            exploit_module_file_path = File.join(::ADONIS::BaseDir, "modules/#{entry}/*.rb")
            Dir[exploit_module_file_path].each do |exploit_module|
                load exploit_module
            end

            begin
                ::ADONIS::MODULE.constants.each do |m|
                    next if m == :Base or tmp_list.include?(m.to_s)
                    tmp_list << m.to_s
                    exploit_class = ::ADONIS::MODULE.class_eval(m.to_s).new.init
                    @exploit_module_hash.update( {exploit_class.id.to_i => exploit_class})
                    @exploit_module_hash_by_spec[entry.to_sym].update({exploit_class.id.to_i => exploit_class})
                end
            rescue
            end
        end
    end

    def self.get_module_class id
        @exploit_module_hash[id.to_i]
    end

    def self.exploit_module_hash
        @exploit_module_hash
    end

    def self.exploit_module_spec_hash
        @exploit_module_hash_by_spec
    end

    def self.exploit hosts
        hosts.each do |target|
            add_target target
        end
        return hosts.size
    end

    def self.exploit_func host
        get_exploit_module_list.each do |id|
            module_class = get_module_class id
            unless host.respond_to? module_class.port_str.to_s
                exploit_logger.error("ADONIS::EXPLOIT::Exploit.exploit, #{id}: #{host.ip} do not support #{module_class.port_str.to_s}")
                next
            end

            if not host.instance_eval(module_class.port_str.to_s) == true
                exploit_logger.info("ADONIS::EXPLOIT::Exploit.exploit, #{id}: #{host.ip} do not open #{module_class.port_str.to_s}")
                next
            end

            module_class.exploit host
        end
    end

    def self.add_target host
        ::ADONIS::COMMON::Queue.lpush "exploit_queue", host.id
    end

    def self.get_target
        host_id = ::ADONIS::COMMON::Queue.lpop "exploit_queue"
        if host_id.nil?
            return nil
        else
            return ::ADONIS::MODEL::Host.find(host_id)
        end
    end

    def self.run
        while true
            begin
                target = get_target
                if target.nil? 
                    sleep 5
                else
                    exploit_func target
                end
            rescue => e
                exploit_logger.error("ADONIS::EXPLOIT::Exploit.run, #{e}")
            end
        end
    end

    def self.active_module module_id
        unless module_id.is_a?(Array)
            module_id = [].push module_id
        end

        module_list = get_exploit_module_list
        module_id.each do |mid|
            mid = mid.to_i
            module_list.push mid if module_list.is_a?(Array) and not module_list.include?(mid)
        end
        ::ADONIS::COMMON::Queue.set "exploit_module_list", module_list.to_json
    end

    def self.inactive_module module_id
        unless module_id.is_a?(Array)
            module_id = [].push module_id
        end

        module_list = get_exploit_module_list
        module_id.each do |mid|
            mid = mid.to_i
            module_list.delete mid if module_list.is_a?(Array) and module_list.include?(mid)
        end

        ::ADONIS::COMMON::Queue.set "exploit_module_list", module_list.to_json
    end

    def self.get_exploit_module_list
        r = ::ADONIS::COMMON::Queue.get "exploit_module_list"
        r.blank? ? Array.new : JSON.parse(r)
    end


    def self.get_moduled_list_by_str str
        module_list = []
        str.split(',').each do |s|
            return @exploit_module_hash.keys if s == "all"
            module_list << s.to_i if @exploit_module_hash.keys.include?(s.to_i)
        end
        return module_list
    end

end
end
end
